Per l'avvio dei container del laboratorio si esegue 

docker-compose up --build

Dopodiché si possono lanciare le shell dei tre container usando lo script 
avvioShell.sh, la shell suricata è facile da identificare, per le altre 2 
bisogna controllare con il comando docker ps l'id del container
una volta che ho le shell devo abilitare il routing con i seguenti comandi 
nel container di attacker

ip route add 172.18.0.0/16 via 172.19.0.2

In oltre serve avviare suricata, una volta soddisfatti delle regole 
suricata specificate in /etc/suricata/rules/suricata.rules, tramite il comando 

suricata -c /etc/suricata/suricata.yaml -i eth0 -i eth1 

in quanto se si facesse all'avvio del container il processo sarebbe legato al 
container e quindi sarebbe impossibile riavviarlo dopo aver cambiato la 
configurazione senza chiudere anche il container, per cui nel dockerfile 
lasciamo come comando l'avvio di uno script di startup start.sh in modo da 
mantenere il container in esecuzione dopo il setup (in particolare si settano 
le direttive di forwarding per ottenere il comportamento di un router).

Una volta che suricata è in esecuzione si può avviare il comando tail nel 
container suricata per controllare i log una volta che siamo soddisfatti 
con la configurazione del nostro IDS suricata:

tail -f /var/log/suricata/eve.json | jq 'select(.event_type=="alert")'

Se vogliamo riconfigurare suricata a runtime, dopo aver modificato uno o 
entrambi i file 

/etc/suricata/suricata.yaml    e    /etc/suricata/rules/suricata.rules  ,

per la cui modifica abbiamo a disposizione l'editor vim (i per modalità 
insert e :wq per salvataggio e quit), bisogna terminare il processo suricata 
usando il comando kill sul pid del suddetto processo oppure un semplice 
comando di interrupt con ctrl + C e riavviarlo con il comando

suricata -c /etc/suricata/suricata.yaml -i eth0 -i eth1 

che specifica in particolare che il traffico da tenere d'occhio passa 
attraverso le interfacce eth0 ed eth1.

Il laboratorio consiste nell'eseguire degli attacchi di diverso tipo sul 
webserver e riuscire a riconfigurare Suricata in modo da 
identificare e magari reagire ad una serie di tipologie di attacco quali 

1) lo scanning attraverso nmap, con i comandi 

nmap -sS 172.18.0.3  ,   nmap -sV 172.18.0.3


2) XSS sfruttando la pagina http://172.18.0.3/xssVuln.php o 
http://172.18.0.3/xssVulnCookie.php. Per farlo da shell possiamo usare 
il comando curl come segue

curl 'http://172.18.0.3/xssVuln.php?comment=%3Cscript%3Ealert%28%27XSS%21%27%29%3C%2Fscript%3E'

3) Attacco DoS, sfruttando ad esempio il comando nella suite nmap

nping --tcp-connect -p 80 --rate 1000 172.18.0.3 -c 10000

dove -c in particolare specifica il numero di iterazioni dopo il 
quale fermarsi, il rate è il numero di pacchetti inviati al secondo, e 
ovviamente sono specificati IP destinazione, porta e tipo di connessione.




Per controllare che i log siano quelli delle regole che vogliamo 
(ossia che l'IDS Suricata si comporti come previsto) usiamo i soliti 
comandi per la stampa dei log di suricata

tail -f /var/log/suricata/eve.json | jq 'select(.event_type=="alert")'

tail -f /var/log/suricata/fast.log
